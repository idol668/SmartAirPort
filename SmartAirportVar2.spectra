import "./imports/DwyerPatterns.spectra"
import "./imports/Utils.spectra"

spec SmartAirport			
			
define N := 2 ; 
define doubleN := 4 ; 

type Aircraft = {NONE, COMMERCIAL, PRIVATE, CARGO};

// ****************************************************************************************
// ***                Environment Controlled input variables                            ***
// ****************************************************************************************
env Aircraft[N] landingAircrafts;
env Aircraft[N] takeoffAircrafts;

env boolean[N] emergencyLanding;
env boolean[N] mechanicalProblem;
env boolean[doubleN] slipperyRunway;


// ****************************************************************************************
// ***                System Controlled output variables                                ***
// ****************************************************************************************
sys boolean[doubleN] landingAllowed;
sys boolean[doubleN] takeoffAllowed;

sys boolean[N] repairTruck;
sys boolean[N] rescueTeam;
sys boolean[doubleN] cleanTruck;


sys boolean[N] ambulance;


// ********************************************************************************************
// *** Whenever aircrafts are coming, they have to stay there until they are allowed to cross ***
// ********************************************************************************************

// Asm 1- planes will stay in their respective waiting area until they'll get the permission to takeoff or land 
asm consistentAssertionlanding{Int(0..(N-1)) i}:
	G consistentAssertion(landingAircrafts[i], landingAllowed[(2*i)] , landingAllowed[(2*i+1)]);

asm consistentAssertiontakeoff{Int(0..(N-1)) i}:
	G consistentAssertion(takeoffAircrafts[i], takeoffAllowed[(2*i)],takeoffAllowed[(2*i+1)]);


// **************************************************************************
// *** Whenever aircraft is coming, it will eventually land / take off  ***
// **************************************************************************

// Gar 1 - Plane that is waiting to takeoff or land will eventually get the permission to perform the action
gar Eventuallylanding{Int(0..(N-1)) i}:
	pRespondsToS(landingAircrafts[i]!=NONE, (landingAllowed[(2*i)] |landingAllowed[(2*i+1)]));
	
gar Eventuallytakeoff{Int(0..(N-1)) i}:
	pRespondsToS(takeoffAircrafts[i]!=NONE , (takeoffAllowed[(2*i)] | takeoffAllowed[(2*i+1)]));

// Gar 2 - Each runway may be used only by one plane at a time for either take off or landing 
gar oneWayRunwayOnly {Int(0..(doubleN-1)) i}:
	G !(next(landingAllowed[i]) & next(takeoffAllowed[i]));
	
// Note - we added this gar for the first state of the controller to assure its completeness (since we used next in our main gar2) 	
gar oneWayRunwayOnlyBegining {Int(0..(doubleN-1)) i}:
	!((landingAllowed[i]) & (takeoffAllowed[i]));
		
// **************************************************************************
// ***                          Mechanical Problem                        ***
// **************************************************************************	
////

//Asm 2 - In the first state of the controller we wouldn't like to have mechanical issues 
asm !mechanicalProblem[0] & !mechanicalProblem[1];	
 
 //Asm 3 - Plane that is waiting for take off and experiencing mechanical problem will have this issue until a repair truck comes to fix it. 
asm consistentAssertionMechProblem  {Int(0..(N-1)) i}:
	G consistentAssertionStillNotRepaired(takeoffAircrafts[i],mechanicalProblem[i],repairTruck[i]);
	
// Asm 4 - If repair truck comes to fix a plane in the next state of the controller the mechanical problem disappear 
asm RepairedAircraft {Int(0..(N-1)) i}:
	G (repairTruck[i] -> next(!mechanicalProblem[i]));
	
// Gar 3- The system shouldn't send repair team to a none object
gar RepairTruckIfAircraftExited {Int(0..(N-1)) i}:
	G (next(takeoffAircrafts[i] = NONE) -> next(!repairTruck[i]));
	
// For the completeness of the controller we added this gar for the beginning state of the controller 
gar RepairTruckIfAircraftExistdBegining{Int(0..(N-1)) i}:
	((takeoffAircrafts[i] = NONE) -> (!repairTruck[i]));

// Gar 4 - repair team should be send only if mechanical problem exists		
gar repairTruckOnlyIfBroken {Int(0..(N-1)) i}:
	G (next(!mechanicalProblem[i]) -> next(!repairTruck[i]));

// For the completeness of the controller we added this gar for the beginning state of the controller 
gar repairTruckOnlyIfBrokenBegin {Int(0..(N-1)) i}:
	 ((!mechanicalProblem[i]) -> (!repairTruck[i]));

// Gar 5- Eventually a repair team will arrive to fix the mechanical problem	
gar eventuallyRepairTrackArrives {Int(0..(N-1)) i}:
	pRespondsToS(mechanicalProblem[i] & takeoffAircrafts[i] != NONE,repairTruck[i]);
 
// Gar 6 - If a take off plane  a mechanical problem it won't be allowed to perform take off  
gar noTrafficAllowedWhileNotRepaired  {Int(0..(N-1)) i}:
	G (next(mechanicalProblem[i] & !repairTruck[i]) -> (next(!takeoffAllowed[(2*i)]) & next(!takeoffAllowed[(2*i+1)])));

// For the completeness of the controller we added this gar for the beginning state of the controller 		
gar noTrafficAllowedWhileNotRepairedBegin  {Int(0..(N-1)) i}:
	((mechanicalProblem[i] & !repairTruck[i]) -> ((!takeoffAllowed[(2*i)]) & (!takeoffAllowed[(2*i+1)])));	

	
//// **************************************************************************
//// ***                          Slippery Runway                           ***
//// **************************************************************************

// Asm 5-  In the first state of the controller we wouldn't like to have a slippery runway 
asm !slipperyRunway[0] & !slipperyRunway[1] & !slipperyRunway[2] & !slipperyRunway[3];

// Asm 6 - If a runway is experiencing a slippery situation, it will remain in this state until a cleaning team arrives to fix it
asm consistentAssertionSlippery {Int (0..(doubleN-1)) i}:
	G consistentAssertionStillDirty(slipperyRunway[i],cleanTruck[i]); 
	
// Asm 7- If a clean team to runway i in the next state runway i won't be slippery 
asm cleanRunway {Int (0..(doubleN-1)) i}:
	G (cleanTruck[i]->next(!slipperyRunway[i]));

// Gar  7 - Clean team won't be send to a not slippery runway  	 
gar cleanTruckOnlyIfSlippry {Int (0..(doubleN-1)) i}:
	G (next(!slipperyRunway[i]) -> next(!cleanTruck[i]));

// For the completeness of the controller we added this gar for the beginning state of the controller 		
gar cleanTruckOnlyIfSlippryBegin {Int (0..(doubleN-1)) i}:
	 ((!slipperyRunway[i]) -> (!cleanTruck[i]));	

// Gar 8- If a runway is slippery eventually a cleaning team will arrive to handle the issue
gar eventuallyCleaningTruckArrives {Int (0..(doubleN-1)) i}:
	pRespondsToS(slipperyRunway[i],cleanTruck[i]);
	
// Gar 9 - If a runway is slippery we won't allow to perform take off or landing on it 
gar trafficIsNotAllowedWhileSlippery {Int (0..(doubleN-1)) i}:
	G (next(slipperyRunway[i])  ->(next(!landingAllowed[i]) & next(!takeoffAllowed[i])));
	
// For the completeness of the controller we added this gar for the beginning state of the controller 		
gar trafficIsNotAllowedWhileSlipperyBegin {Int (0..(doubleN-1)) i}:
	G ((slipperyRunway[i])  ->((!landingAllowed[i]) & (!takeoffAllowed[i])));	

//// *************************************************************************************
//// ***                        Emergency Landing Var 2                                ***
//// ***                        Issue : Unrealizable                                   ***
//// *** It can be solved by removing the gar NoRescueTeamWithoutEmergency             ***
//// *** But It caused a bad behavior - rescue team came without an emergency condition***
//// **************************************************************************************

//// *** We used this var to understand our specification issues and create our current emergency landing specification***
//Note we didn't finish the specification since we encountered too many issues along the way.
//We came to the conclusion that we should re-think our automaton states and transitions again

// level 1
// Asm 8 - There are infinite amount of times where we dont have an emergency landing issue on at least one waiting area
asm notAlwaysEmegency{Int (0..(N-1)) i}:
	GF (!emergencyLanding[i]);	
	
// Asm 9 - In the beginning state we wouldn't like an emergency landing
asm !emergencyLanding[0] & !emergencyLanding[1];

//Gar 10 - Rescue team should be send only if an emergency landing occurred	
gar NoRescueTeamWithoutEmergency{Int (0..(N-1)) i}:
	G (next(!emergencyLanding[i]) -> next(!rescueTeam[i]));
////level k
//Gar 11 -If a rescue team isn't sent to handle the emergency landing the plane won't be allowed to land in the *same* state	
gar EmegencyLandingWithoutRescueTeamNotAllowToLand{Int (0..(N-1)) i}:
	G next((emergencyLanding[i] & !rescueTeam[i]))-> next((!landingAllowed[(2*i)] & !landingAllowed[(2*i+1)]));
	
//Gar 12 -If we are in emergency landing state with no rescue team in the next state rescue team will be sent and landing will be allowed
gar sendingRescueTeam{Int (0..(N-1)) i}:
	G (emergencyLanding[i] & !rescueTeam[i]) ->next(rescueTeam[i] & emergencyLanding[i] & (landingAllowed[(2*i)] | landingAllowed[(2*i+1)]));

// Gar 13 - We won't allow a state where at some point we have both emergency landing and rescue team or not emergency landing and rescue team
// In the automaton we tried to think of we wouldn't like to have this  kind of state transition .
// If we didnt have an emergency landing and rescue team and in the next state we had an emergency landing,
// only on the next state a rescue team will come to handle the condition
gar trig [true]*([!emergencyLanding[0] & !rescueTeam[0]][emergencyLanding[0] & rescueTeam[0]]) |=> false;
gar trig [true]*([!emergencyLanding[1] & !rescueTeam[1]][emergencyLanding[1] & rescueTeam[1]]) |=> false;

////level k+1
// asm 10 - If rescue team came there will be no emergency landing in the next state
asm EmergencyHandledByRescueTeam{Int (0..(N-1)) i}:
	G (rescueTeam[i] -> next(!emergencyLanding[i]));
	
//Gar 14 - If emergency landing condition occurred take offs aren't allowed in the airport  
gar takeoffCurfewWheneverEmergencylanding{Int (0..(N-1)) i}:
	G (next((emergencyLanding[i] & !rescueTeam[i])) -> next((!takeoffAllowed[0] & !takeoffAllowed[1] & !takeoffAllowed[2] & !takeoffAllowed[3])));
	

